<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>DIY Light Sensor with BH1750 and FeatherS2 on Angela&#39;s Blog</title>
        <link>https://angelajt.com/docs/lightsensor/</link>
        <description>Recent content in DIY Light Sensor with BH1750 and FeatherS2 on Angela&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&amp;copy; 2021 Angela Traugott 
</copyright>
        <lastBuildDate>Tue, 15 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://angelajt.com/docs/lightsensor/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>1. Setup</title>
        <link>https://angelajt.com/docs/lightsensor/setup/</link>
        <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://angelajt.com/docs/lightsensor/setup/</guid>
        <description>&lt;h2 id=&#34;a-wire-it-all-up&#34;&gt;a. Wire it all up&lt;/h2&gt;
&lt;p&gt;Plug one end of the STEMMA connector into the BH1750, and the other end into the FeatherS2. Then plug the FeatherS2 into your computer with the USB-C cable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelajt.com/wiring.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;wiring&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;b-install-some-libraries&#34;&gt;b. Install some libraries&lt;/h2&gt;
&lt;p&gt;On your computer, you&amp;rsquo;ll see the FeatherS2 board mounted as a USB drive called &lt;code&gt;CIRCUITPY&lt;/code&gt;. Inside, you&amp;rsquo;ll see a folder called &lt;code&gt;lib&lt;/code&gt;. Unless you&amp;rsquo;ve already installed libraries on your board, the &lt;code&gt;lib&lt;/code&gt; folder should be empty. What you&amp;rsquo;ll want to do is get the BH1750 library into this folder so that you can talk to your BH1750 through code.&lt;/p&gt;
&lt;p&gt;First, install and unzip the &lt;a class=&#34;link&#34; href=&#34;https://circuitpython.org/libraries&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CircuitPython Library Bundle&lt;/a&gt;. The FeatherS2 comes with CircuitPython 6, so make sure you install Bundle Version 6.x.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelajt.com/button.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Screenshot of the correct download button&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Then look inside the bundle folder and find &lt;code&gt;adafruit_bh1750.mpy&lt;/code&gt; and the &lt;code&gt;adafruit_bus_device&lt;/code&gt; folder. Copy both over to your FeatherS2&amp;rsquo;s &lt;code&gt;lib&lt;/code&gt; folder. &lt;strong&gt;If you&amp;rsquo;re planning to make your light sensor work over WiFi, now would be a good time to copy the folder named &lt;code&gt;adafruit_minimqtt&lt;/code&gt; over to the &lt;code&gt;lib&lt;/code&gt; folder as well.&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>2. Getting measurements through USB</title>
        <link>https://angelajt.com/docs/lightsensor/usb/</link>
        <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://angelajt.com/docs/lightsensor/usb/</guid>
        <description>&lt;h2 id=&#34;a-upload-the-code&#34;&gt;a. Upload the code&lt;/h2&gt;
&lt;p&gt;The code to talk to the light sensor is very simple. Edit &lt;code&gt;code.py&lt;/code&gt; on &lt;code&gt;CIRCUITPY&lt;/code&gt; so that the file contains just these lines (this code was taken from &lt;a class=&#34;link&#34; href=&#34;https://learn.adafruit.com/adafruit-bh1750-ambient-light-sensor/python-circuitpython#example-code-3066441-17&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adafruit&amp;rsquo;s BH1750 tutorial&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time
import board
import adafruit_bh1750

i2c = board.I2C()
sensor = adafruit_bh1750.BH1750(i2c)

while True:
	print(&amp;quot;%.2f Lux&amp;quot; % sensor.lux)
	time.sleep(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&amp;rsquo;d like to measure light in foot-candles instead of lux, use this code (which converts the lux reading to foot-candles):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time
import board
import adafruit_bh1750

i2c = board.I2C()
sensor = adafruit_bh1750.BH1750(i2c)

while True:
	fc = sensor.lux * 0.09290304
  print(&amp;quot;%.2f footcandles&amp;quot; % fc)
	time.sleep(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;b-get-measurements&#34;&gt;b. Get measurements&lt;/h2&gt;
&lt;p&gt;To see the output from your sensor, you&amp;rsquo;ll need to connect to your FeatherS2&amp;rsquo;s serial console. This is easy if you&amp;rsquo;re using &lt;a class=&#34;link&#34; href=&#34;https://learn.adafruit.com/welcome-to-circuitpython/installing-mu-editor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mu Editor&lt;/a&gt; which is recommended for CircuitPython, but in my case I was having trouble installing it so I followed &lt;a class=&#34;link&#34; href=&#34;https://learn.adafruit.com/welcome-to-circuitpython/advanced-serial-console-on-mac-and-linux&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CiruitPython&amp;rsquo;s advanced serial console&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelajt.com/command.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Screen command&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://angelajt.com/output.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Light readings&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>3. Getting measurements through WiFi</title>
        <link>https://angelajt.com/docs/lightsensor/wifi/</link>
        <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://angelajt.com/docs/lightsensor/wifi/</guid>
        <description>&lt;h2 id=&#34;a-set-up-a-raspberry-pi-with-home-assistant&#34;&gt;a. Set up a Raspberry Pi with Home Assistant&lt;/h2&gt;
&lt;p&gt;Follow &lt;a class=&#34;link&#34; href=&#34;https://www.home-assistant.io/installation/raspberrypi/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the Home Assistant installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;b-install-mosquitto-broker&#34;&gt;b. Install Mosquitto broker&lt;/h2&gt;
&lt;p&gt;Follow &lt;a class=&#34;link&#34; href=&#34;https://github.com/home-assistant/addons/blob/master/mosquitto/DOCS.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the Mosquitto installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;c-upload-the-code&#34;&gt;c. Upload the code&lt;/h2&gt;
&lt;p&gt;Replace the contents of &lt;code&gt;code.py&lt;/code&gt; with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import time
import ssl
import json
import alarm
import socketpool
import wifi
import adafruit_minimqtt.adafruit_minimqtt as MQTT
import board
import adafruit_bh1750

PUBLISH_DELAY = 5
MQTT_TOPIC = &amp;quot;state/light-sensor&amp;quot;
USE_DEEP_SLEEP = False

i2c = board.I2C()
sensor = adafruit_bh1750.BH1750(i2c)

# Add a secrets.py to your filesystem that has a dictionary called secrets with &amp;quot;ssid&amp;quot; and
# &amp;quot;password&amp;quot; keys with your WiFi credentials. DO NOT share that file or commit it into Git or other
# source control.
# pylint: disable=no-name-in-module,wrong-import-order
try:
    from secrets import secrets
except ImportError:
    print(&amp;quot;WiFi secrets are kept in secrets.py, please add them there!&amp;quot;)
    raise


wifi.radio.connect(secrets[&amp;quot;ssid&amp;quot;], secrets[&amp;quot;password&amp;quot;])
print(&amp;quot;Connected to %s!&amp;quot; % secrets[&amp;quot;ssid&amp;quot;])

# Create a socket pool
pool = socketpool.SocketPool(wifi.radio)

# Set up a MiniMQTT Client
mqtt_client = MQTT.MQTT(
    broker=secrets[&amp;quot;mqtt_broker&amp;quot;],
    port=secrets[&amp;quot;mqtt_port&amp;quot;],
    username=secrets[&amp;quot;mqtt_username&amp;quot;],
    password=secrets[&amp;quot;mqtt_password&amp;quot;],
    socket_pool=pool,
    ssl_context=ssl.create_default_context(),
)

print(&amp;quot;Attempting to connect to %s&amp;quot; % mqtt_client.broker)
mqtt_client.connect()

while True:
    fc = sensor.lux * 0.09290304
    print(&amp;quot;%.2f footcandles&amp;quot; % fc)
    output = {
        &amp;quot;footcandles&amp;quot;: fc,
    }
    mqtt_client.publish(MQTT_TOPIC, json.dumps(output))

    if USE_DEEP_SLEEP:
        mqtt_client.disconnect()
        pause = alarm.time.TimeAlarm(monotonic_time=time.monotonic() + PUBLISH_DELAY)
        alarm.exit_and_deep_sleep_until_alarms(pause)
    else:
        last_update = time.monotonic()
        while time.monotonic() &amp;lt; last_update + PUBLISH_DELAY:
            mqtt_client.loop()
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
